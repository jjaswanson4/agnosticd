- name: Step 000 Pre Infrastructure
  hosts: localhost
  connection: local
  gather_facts: false
  become: false
  tags:
    - step001
    - pre_infrastructure
    - generate_env_keys

  vars:
    student_list:
      - 1
  tasks:
    - debug:
        msg: "Step 000 Pre Infrastructure"

    - name: ssh key block
      block:
        - name: Generate SSH keys
          shell: ssh-keygen -b 2048 -t rsa -f "{{ output_dir }}/{{ env_authorized_key }}" -q -N ""
          args:
            creates: "{{ output_dir }}/{{ env_authorized_key }}"

        - name: fix permission
          file:
            path: "{{ output_dir }}/{{ env_authorized_key }}"
            mode: 0400

        - name: Generate SSH pub key
          shell: ssh-keygen -y -f "{{ output_dir }}/{{ env_authorized_key }}" > "{{ output_dir }}/{{ env_authorized_key }}.pub"
          args:
            creates: "{{ output_dir }}/{{ env_authorized_key }}.pub"

        - name: upload key to aws
          ec2_key:
            name: "{{ workshop_key_name | default('ansible-sap-hana-workshop-key') }}"
            key_material: "{{ lookup('file', '{{ output_dir }}/{{ env_authorized_key }}.pub') }}"

        - name: set key fact
          ansible.builtin.set_fact:
            key_name: "{{ workshop_key_name | default('ansible-sap-hana-workshop-key') }}"
            ansible_ssh_private_key_file: "{{ output_dir }}/{{ env_authorized_key }}"
        
      when: set_env_authorized_key | bool

    - name: enumerate bastion instance
      ansible.builtin.set_fact:
        bastion_instance:
          - name: bastion
            count: 1
            unique: true
            public_dns: true
            dns_loadbalancer: true
            floating_ip: true
            image: RHEL84GOLD
            flavor:
              ec2: t2.medium
            tags:
              - key: "AnsibleGroup"
                value: "bastions"
              - key: "ostype"
                value: "linux"
              - key: ansible_python_interpreter
                value: /usr/libexec/platform-python
            rootfs_size: 50
            security_groups:
              - HostSG
              - BastionSG

    - name: enumerate tower instances
      ansible.builtin.set_fact:
        tower_instances: >-
          {%- set results = [] -%}
          {%- for student in student_list -%}
          {%-   set d = {"name": 'student' ~ student ~ 'tower'} -%}
          {%-   set _ = d.update({"count": "1"}) -%}
          {%-   set _ = d.update({"unique": true}) -%}
          {%-   set _ = d.update({"public_dns": true}) -%}
          {%-   set _ = d.update({"dns_loadbalancer": true}) -%}
          {%-   set _ = d.update({"floating_ip": false}) -%}
          {%-   set _ = d.update({"image": tower_instance_image}) -%}
          {%-   set _ = d.update({"flavor": {"ec2": tower_instance_type}}) -%}
          {%-   set _ = d.update({"tags": [{"key": "AnsibleGroup", "value": "towers"}, {"key": "ostype", "value": "linux"}, {"key": "ansible_python_interpreter", "value": "/usr/libexec/platform-python"}]}) -%}
          {%-   set _ = d.update({"rootfs_size": "100"}) -%}
          {%-   set _ = d.update({"security_groups": ["HostSG", "BastionSG", "WebSG"]}) -%}
          {%-   set _ = results.append(d) -%}
          {%- endfor -%}
          {{ results }}

    - name: enumerate s4hana instances
      ansible.builtin.set_fact:
        s4hana_instances: >-
          {%- set results = [] -%}
          {%- for student in student_list -%}
          {%-   set d = {"name": 'student' ~ student ~ 's4hana'} -%}
          {%-   set _ = d.update({"count": "1"}) -%}
          {%-   set _ = d.update({"unique": true}) -%}
          {%-   set _ = d.update({"public_dns": true}) -%}
          {%-   set _ = d.update({"dns_loadbalancer": true}) -%}
          {%-   set _ = d.update({"floating_ip": false}) -%}
          {%-   set _ = d.update({"image": s4hana_instance_image}) -%}
          {%-   set _ = d.update({"flavor": {"ec2": s4hana_instance_type}}) -%}
          {%-   set _ = d.update({"tags": [{"key": "AnsibleGroup", "value": "s4hanas"}, {"key": "ostype", "value": "linux"}, {"key": "ansible_python_interpreter", "value": "/usr/libexec/platform-python"}]}) -%}
          {%-   set _ = d.update({"rootfs_size": "100"}) -%}
          {%-   set _ = d.update({"volumes": [{"name": "/dev/sdf", "size": "100"}]}) -%}
          {%-   set _ = d.update({"security_groups": ["HostSG"]}) -%}
          {%-   set _ = results.append(d) -%}
          {%- endfor -%}
          {{ results }}

    - name: enumerate hana1 instances
      ansible.builtin.set_fact:
        hana1_instances: >-
          {%- set results = [] -%}
          {%- for student in student_list -%}
          {%-   set d = {"name": 'student' ~ student ~ 'hana1'} -%}
          {%-   set _ = d.update({"count": "1"}) -%}
          {%-   set _ = d.update({"unique": true}) -%}
          {%-   set _ = d.update({"public_dns": true}) -%}
          {%-   set _ = d.update({"dns_loadbalancer": true}) -%}
          {%-   set _ = d.update({"floating_ip": false}) -%}
          {%-   set _ = d.update({"image": hana_instance_image}) -%}
          {%-   set _ = d.update({"flavor": {"ec2": hana_instance_type}}) -%}
          {%-   set _ = d.update({"tags": [{"key": "AnsibleGroup", "value": "hanas"}, {"key": "ostype", "value": "linux"}, {"key": "ansible_python_interpreter", "value": "/usr/libexec/platform-python"}]}) -%}
          {%-   set _ = d.update({"rootfs_size": "100"}) -%}
          {%-   set _ = d.update({"volumes": [{"name": "/dev/sdf", "size": "500"}]}) -%}
          {%-   set _ = d.update({"security_groups": ["HostSG"]}) -%}
          {%-   set _ = results.append(d) -%}
          {%- endfor -%}
          {{ results }}        

    - name: enumerate hana2 instances
      ansible.builtin.set_fact:
        hana2_instances: >-
          {%- set results = [] -%}
          {%- for student in student_list -%}
          {%-   set d = {"name": 'student' ~ student ~ 'hana2'} -%}
          {%-   set _ = d.update({"count": "1"}) -%}
          {%-   set _ = d.update({"unique": true}) -%}
          {%-   set _ = d.update({"public_dns": true}) -%}
          {%-   set _ = d.update({"dns_loadbalancer": true}) -%}
          {%-   set _ = d.update({"floating_ip": false}) -%}
          {%-   set _ = d.update({"image": hana_instance_image}) -%}
          {%-   set _ = d.update({"flavor": {"ec2": hana_instance_type}}) -%}
          {%-   set _ = d.update({"tags": [{"key": "AnsibleGroup", "value": "hanas"}, {"key": "ostype", "value": "linux"}, {"key": "ansible_python_interpreter", "value": "/usr/libexec/platform-python"}]}) -%}
          {%-   set _ = d.update({"rootfs_size": "100"}) -%}
          {%-   set _ = d.update({"volumes": [{"name": "/dev/sdf", "size": "500"}]}) -%}
          {%-   set _ = d.update({"security_groups": ["HostSG"]}) -%}
          {%-   set _ = results.append(d) -%}
          {%- endfor -%}
          {{ results }}

    - name: add up instances
      ansible.builtin.set_fact:
        instances: "{{ bastion_instance }} + {{ tower_instances }} + {{ s4hana_instances }} + {{ hana1_instances }} + {{ hana2_instances }}"
